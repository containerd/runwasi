name: CI

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

env:
  CARGO_TERM_COLOR: always

jobs:
  fmt:
    runs-on: "ubuntu-latest"
    steps:
      - name: Free Disk Space (Ubuntu)
        uses: insightsengineering/disk-space-reclaimer@v1
        with:
          tools-cache: true
          android: true
          dotnet: true
          haskell: true
          large-packages: false
          swap-storage: false
          docker-images: true
      - uses: actions/checkout@v3
      - uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          components: rustfmt, clippy
      - name: Setup build env
        run: ./scripts/setup.sh
        shell: bash
      - run: 
          # needed to run rustfmt in nightly toolchain
          rustup toolchain install nightly --component rustfmt
      - name: Run checks
        run: make check
  build:
    strategy:
      matrix:
        os: ["ubuntu-20.04", "ubuntu-22.04"]
    runs-on: ${{ matrix.os }}
    steps:
      - name: Free Disk Space (Ubuntu)
        uses: insightsengineering/disk-space-reclaimer@v1
        with:
          tools-cache: true
          android: true
          dotnet: true
          haskell: true
          large-packages: false
          swap-storage: false
          docker-images: true
      - name: "check cgroup version"
        run: "mount | grep cgroup"
      - uses: actions/checkout@v3
      - uses: actions-rust-lang/setup-rust-toolchain@v1
        env:
          RUST_CACHE_KEY_OS: ${{ matrix.os }}
      - name: Setup build env
        run: ./scripts/setup.sh
        shell: bash
      - name: Build
        uses: actions-rs/cargo@v1
        with:
          command: build
          args: --all --verbose
      - name: Validate docs
        run: ./scripts/validate-docs.sh
      - name: Run tests
        run: |
          make test

  e2e-wasmtime:
    needs: [build]
    strategy:
      matrix:
        # 20.04 uses cgroupv1, 22.04 uses cgroupv2
        os: ["ubuntu-20.04", "ubuntu-22.04"]
    runs-on: ${{ matrix.os }}
    steps:
      - name: Free Disk Space (Ubuntu)
        uses: insightsengineering/disk-space-reclaimer@v1
        with:
          tools-cache: true
          android: true
          dotnet: true
          haskell: true
          large-packages: false
          swap-storage: false
          docker-images: true
      - name: "check cgroup version"
        run: "mount | grep cgroup"
      - uses: actions/checkout@v3
      - name: setup rust-wasm target
        run: rustup target add wasm32-wasi
      - name: Setup build env
        run: ./scripts/setup.sh
        shell: bash
      - name: run
        run: make test/k8s
      # only runs when the previous step fails
      - name: inspect failed pods
        if: failure()
        run: |
          kubectl get pods --all-namespaces
          kubectl describe pods --all-namespaces
      - name: cleanup
        if: always()
        run: make test/k8s/clean

  e2e-wasmedge:
    needs: [build]
    strategy:
      matrix:
        os: ["ubuntu-20.04", "ubuntu-22.04"]
    runs-on: ${{ matrix.os }}
    steps:
      - name: Free Disk Space (Ubuntu)
        uses: insightsengineering/disk-space-reclaimer@v1
        with:
          tools-cache: true
          android: true
          dotnet: true
          haskell: true
          large-packages: false
          swap-storage: false
          docker-images: true
      - name: "check cgroup version"
        run: "mount | grep cgroup"
      - uses: actions/checkout@v3
      - name: setup rust-wasm target
        run: rustup target add wasm32-wasi
      - name: Setup build env
        run: ./scripts/setup.sh
        shell: bash
      - name: run
        run: make test/k3s
      - name: cleanup
        if: always()
        run: make test/k3s/clean
