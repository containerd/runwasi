# yaml-language-server: $schema=https://json.schemastore.org/github-action.json

name: Release wasi-demo-app
run-name: wasi-demo-app@${{ inputs.version }}

on:
  workflow_dispatch:
    inputs:
      version:
        description: "The version of the image to release. (e.g., 1.2.3)"
        type: string
        required: true
      dry_run:
        description: "Run the release without actually releasing bits"
        type: boolean
        default: true

env:
  CARGO_TERM_COLOR: always
  IMAGES: "wasi-demo-app wasi-demo-oci wasi-demo-oci-artifact wasi-demo-http"

jobs:
  release-wasi-demo:
    permissions:
      packages: write
    runs-on: ubuntu-latest
    outputs:
      wasi_demo_app: ${{ steps.get_digests.outputs.wasi_demo_app }}
      wasi_demo_oci: ${{ steps.get_digests.outputs.wasi_demo_oci }}
      wasi_demo_oci_artifact: ${{ steps.get_digests.outputs.wasi_demo_oci_artifact }}
      wasi_demo_http: ${{ steps.get_digests.outputs.wasi_demo_http }}
    steps:
      - uses: actions/checkout@v5
      - uses: ./.github/actions/setup-env
      - name: Install Rust and wasm32-wasi target
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          target: wasm32-wasip1
          override: true

      - name: Convert repository name to lowercase
        id: prep
        run: echo "repo=$(echo '${{ github.repository }}' | tr '[:upper:]' '[:lower:]')" >> $GITHUB_OUTPUT

      - name: Login to GitHub container registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Enable containerd image store
        run: |
          echo '{ "features": { "containerd-snapshotter": true } }' | sudo tee /etc/docker/daemon.json
          sudo systemctl restart docker
          docker info -f '{{ .DriverStatus }}'
      
      - name: Build oci tarballs
        run: |
          make docker/load
          make docker/load/oci
          make docker/load/http
          docker image ls

      - name: Tagging images
        run: |
          for image in $IMAGES; do
            docker tag ghcr.io/containerd/runwasi/$image:latest ghcr.io/${{ steps.prep.outputs.repo }}/$image:${{ inputs.version }}
            docker tag ghcr.io/containerd/runwasi/$image:latest ghcr.io/${{ steps.prep.outputs.repo }}/$image:latest
          done
      
      - name: Push images to ghcr.io
        if: ${{ inputs.dry_run == false }}
        run: |
          for image in $IMAGES; do
            docker push ghcr.io/${{ steps.prep.outputs.repo }}/$image:${{ inputs.version }}
            docker push ghcr.io/${{ steps.prep.outputs.repo }}/$image:latest
          done

      - name: Display image digests
        id: get_digests
        run: |
          for image in $IMAGES; do
            DIGEST=$(docker inspect ghcr.io/${{ steps.prep.outputs.repo }}/$image --format '{{ .Id }}' --type image)
            echo "Digest for $image: $DIGEST"
            sanitized_image="${image//-/_}"
            echo "$sanitized_image=$DIGEST" >> $GITHUB_OUTPUT
          done
  
  sign:
    if: ${{ inputs.dry_run == false }}
    needs: 
      - release-wasi-demo
    strategy:
      matrix:
        image: ["wasi_demo_app", "wasi_demo_oci", "wasi_demo_oci_artifact", "wasi_demo_http"]
    uses: ./.github/workflows/sign.yml
    with:
      image-name: ${{ matrix.image }}
      image-digest: ${{ needs.release-wasi-demo.outputs[matrix.image] }}

  sbom:
    if: ${{ inputs.dry_run == false }}
    needs:
      - release-wasi-demo
    strategy:
      matrix:
        image: ["wasi_demo_app", "wasi_demo_oci", "wasi_demo_oci_artifact", "wasi_demo_http"]
    uses: ./.github/workflows/sbom.yml
    with:
      image-name: ${{ matrix.image }}
      image-digest: ${{ needs.release-wasi-demo.outputs[matrix.image] }}
